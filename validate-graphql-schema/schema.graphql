"""
Account represents a user on sittercity.com's platform
"""
interface Account {
  """
  The cancelled contracts for the account
  """
  cancelledContracts(after: String, first: Int): AccountContractsConnection!

  """
  The cancelled requests for the account
  """
  cancelledRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The completed contracts for the account
  """
  completedContracts(after: String, first: Int): AccountContractsConnection!

  """
  The declined requests for the account
  """
  declinedRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The expired requests for the account
  """
  expiredRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The sso identifier for the account
  """
  id: UUID!

  """
  A name for the account used for display purposes
  """
  name: String!

  """
  A phone number for this account
  """
  phoneNumber: PhoneNumber

  """
  A photo url for the account
  """
  photoUrl: String

  """
  The pending requests for the account
  """
  requests(after: String, first: Int): AccountRequestsConnection!

  """
  The upcoming contracts for the account
  """
  upcomingContracts(after: String, first: Int): AccountContractsConnection!
}

"""
AccountContractEdge contains edge information for the account and connection to the contract
"""
type AccountContractEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Contract
}

"""
AccountContractsConnection contains pagination info and edges for contract relationships for an account
"""
type AccountContractsConnection {
  """
  Edges for this connection
  """
  edges: [AccountContractEdge!]!

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!

  """
  totalCount of contracts that exist
  """
  totalCount: Int!
}

"""
AccountKind represents the different roles an account can play
"""
enum AccountKind {
  """
  A parent has a family and looks for care
  """
  PARENT

  """
  A sitter provides care
  """
  SITTER
}

"""
AccountNote is a note written by one account about another.
"""
type AccountNote {
  """
  The time when the note was last updated at
  """
  lastUpdated: DateTime!

  """
  The text of the note
  """
  notes: String!
}

"""
AccountRequestEdge contains edge information for the account request connection
"""
type AccountRequestEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Request
}

"""
AccountRequestsConnection contains pagination info and edges for account request relationships
"""
type AccountRequestsConnection {
  """
  Edges for this connection
  """
  edges: [AccountRequestEdge!]!

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!

  """
  Total count of upcoming requests
  """
  totalCount: Int!
}

"""
Application represents a sitter's attempt to seek employment for a posted job
"""
type Application {
  """
  Whether the parent has viewed this application
  """
  hasParentViewed: Boolean!

  """
  Identifier for the application
  """
  id: UUID!

  """
  The job
  """
  job: IndividualJob!

  """
  The sitter who applied for the job
  """
  sitter: Sitter
}

"""
ApplicationConnection contains pagination information and edges for sitter applications to a job posting.
"""
type ApplicationConnection {
  """
  Edges for this connection
  """
  edges: [ApplicationEdge!]!

  """
  Pagination information for this connection
  """
  pageInfo: PageInfo!

  """
  Total count of applications
  """
  totalCount: Int!
}

"""
ApplicationEdge contains edge information for the job -> application connection
"""
type ApplicationEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Application
}

"""
Availability represents time blocks that an account has set to indicate availability or lack thereof
"""
type Availability {
  """
  The linked object that caused this availability to appear
  """
  cause: AvailabilityCause

  """
  When this availability block ends
  """
  end: DateTime!

  """
  What kind of availability this is
  """
  kind: AvailabilityKind!

  """
  When this availability block starts
  """
  start: DateTime!
}

"""
AvailabilityCause describes what caused an availability block to appear
"""
union AvailabilityCause = InterviewContract

"""
AvailabilityKind represents the different kinds of availability that can exist
"""
enum AvailabilityKind {
  """
  This availability block is available to book by parents
  """
  AVAILABLE

  """
  This availability block is booked
  """
  BOOKED
}

scalar BirthDate

enum CareType {
  BABYSITTER
  COMPANION_CARE
  HOUSEKEEPING
  NANNY
  PET_CARE
  SPECIAL_NEEDS
  UNKNOWN
  babysitter @deprecated(reason: "Use BABYSITTER")
  companion_care @deprecated(reason: "Use COMPANION_CARE")
  housekeeping @deprecated(reason: "Use HOUSEKEEPING")
  nanny @deprecated(reason: "Use NANNY")
  pet_care @deprecated(reason: "Use PET_CARE")
  special_needs @deprecated(reason: "Use SPECIAL_NEEDS")
  unknown @deprecated(reason: "Use UNKNOWN")
}

"""
Contract represents an agreement between a parent and a sitter to perform work
"""
interface Contract {
  """
  A freeform text representation of the work
  """
  details: String!

  """
  The end time of the work the request represents
  """
  end: DateTime!

  """
  A list of family members the work will involve
  """
  familyMembers: [FamilyMember!]!

  """
  The primary key identifier of this request
  """
  id: UUID!

  """
  The kind of contract
  """
  kind: String!

  """
  The location information for where the interview will occur at
  """
  location: Location!

  """
  The parent who is requesting the service
  """
  parent: Parent!

  """
  A list of any kinds of pets at the location
  """
  petInfo: [PetInformation!]!

  """
  The rate for the sitting in USD/hour
  """
  rate: Int!

  """
  The sitter who is performing the service
  """
  sitter: Sitter!

  """
  The start time of the work the request represents
  """
  start: DateTime!
}

scalar Date

scalar DateTime

enum Day {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}

scalar Decimal

"""
FamilyMember represents a family member that will be used for care
"""
type FamilyMember {
  """
  The birth date of this family member
  """
  birthDate: BirthDate!

  """
  The name of this family member
  """
  name: String
}

"""
FamilyMemberInput represents a family member that will be used for care
"""
input FamilyMemberInput {
  """
  The birth date of this family member
  """
  birthDate: BirthDate!

  """
  The name of this family member
  """
  name: String
}

"""
GeoPointInput represents a specific point on a Cartesian coordinate system
"""
input GeoPointInput {
  """
  The longitude of the location
  """
  x: Decimal!

  """
  The latitude of the location
  """
  y: Decimal!
}

"""
geopage returns the geopage that matches the city and state
"""
type Geopage {
  """
  The city
  """
  city: String!

  """
  The city name, formatted for user-facing displays
  """
  cityDisplay: String!

  """
  The geolocation of the city
  """
  geopoint: Point!

  """
  The state
  """
  state: String!

  """
  The zipcode
  """
  zipCode: String!
}

scalar HourMinute

enum HowDidYouHearAboutUs {
  BILLBOARD
  BRIGHT_HORIZONS_BENEFIT
  FACEBOOK_INSTAGRAM
  FRIENDS_OR_FAMILY_REFERRAL
  GOOGLE
  PODCAST_AD
  POSTAL_MAIL
  PRESS_COVERAGE
  TV_AD
  YOUTUBE
}

"""
The response of the sitter for the request
"""
type IdentifiedSitter {
  """
  The reason for a decline
  """
  declinedReason: String

  """
  Notes a sitter can leave when replying the the request
  """
  notes: String

  """
  The response of the sitter for the request
  """
  response: IdentifiedSitterResponse

  """
  The sitter account that is responding
  """
  sitter: Sitter!
}

"""
IdentifiedSitterResponse represents a sitter's response to a request, positively or negatively
"""
enum IdentifiedSitterResponse {
  """
  the sitter has accepted the request
  """
  ACCEPTED

  """
  the sitter has declined the request
  """
  DECLINED
}

"""
IndividualJob provides job data for a single, distinct job retrieved by Job ID
"""
type IndividualJob implements Job {
  """
  Sitter applications for the job.
  """
  applications(after: String, first: Int): ApplicationConnection!

  """
  The type of care the parent requested
  """
  careType: CareType!

  """
  Time the job was posted
  """
  createdAt: DateTime!

  """
  The body of the description for the job
  """
  description: String!

  """
  Date the Job expires, ISO-8601 format. Time information is not included.
  """
  expiresAt: Date!

  """
  The identifier for the job
  """
  id: UUID!

  """
  Whether the job is considered currently active considering the state and expiry
  """
  isActive: Boolean!

  """
  The seeker who posted the job
  """
  parent: Parent!

  """
  Details about the timing of the job, when it starts and how regular the sitter is needed
  """
  schedule: JobSchedule!

  """
  The current status of the job
  """
  status: JobStatus!

  """
  A descriptive title for the job
  """
  title: String!

  """
  Time the job was last updated
  """
  updatedAt: DateTime!
}

"""
Contract represents an agreement between a parent and a sitter to perform work
"""
type InterviewContract implements Contract {
  """
  A freeform text representation of the work
  """
  details: String!

  """
  The end time of the work the request represents
  """
  end: DateTime!

  """
  A list of family members the work will involve
  """
  familyMembers: [FamilyMember!]!

  """
  The primary key identifier of this request
  """
  id: UUID!

  """
  The kind of contract
  """
  kind: String!

  """
  The location information for where the interview will occur at
  """
  location: Location!

  """
  The parent who is requesting the service
  """
  parent: Parent!

  """
  A list of any kinds of pets at the location
  """
  petInfo: [PetInformation!]!

  """
  Private feedback the parent has entered about this contract. Only the parent can ask for this field
  """
  privateFeedback: InterviewContractFeedback

  """
  The rate for the sitting in USD/hour
  """
  rate: Int!

  """
  The sitter who is performing the service
  """
  sitter: Sitter!

  """
  The start time of the work the request represents
  """
  start: DateTime!
}

"""
InterviewContractFeedback represents the private feedback the parent can leave about an interview
"""
type InterviewContractFeedback {
  """
  Freeform text the parent can leave
  """
  notes: String

  """
  Did the parent actually hold the interview?
  """
  performedInterview: Boolean

  """
  Would the parent hire the sitter they interviewed?
  """
  wouldHire: Boolean
}

"""
InterviewRequest represents an implementation of Requestwhich asks a sitter if they will perform an interview
"""
type InterviewRequest implements Request {
  """
  A freeform text representation of the work
  """
  details: String!

  """
  The end time of the work the request represents
  """
  end: DateTime!

  """
  The time this request expires at. Sitters cannot respond once the expiry hits
  """
  expiry: DateTime!

  """
  A list of family members the work will involve
  """
  familyMembers: [FamilyMember!]!

  """
  The primary key identifier of this request
  """
  id: UUID!

  """
  A list of sitter accounts associated with this request
  """
  identifiedSitters: [IdentifiedSitter!]!

  """
  The location information for where the interview will occur at
  """
  location: Location!

  """
  The parent who is requesting the service
  """
  parent: Parent!

  """
  A list of any kinds of pets at the location
  """
  petInfo: [PetInformation!]!

  """
  The rate for the sitting in USD/hour
  """
  rate: Int!

  """
  The start time of the work the request represents
  """
  start: DateTime!
}

"""
Details about a posted job on sittercity.com's platform
"""
interface Job {
  """
  The type of care the parent requested
  """
  careType: CareType!

  """
  Time the job was posted
  """
  createdAt: DateTime!

  """
  The body of the description for the job
  """
  description: String!

  """
  Date the Job expires, ISO-8601 format. Time information is not included.
  """
  expiresAt: Date!

  """
  The identifier for the job
  """
  id: UUID!

  """
  Whether the job is considered currently active considering the state and expiry
  """
  isActive: Boolean!

  """
  The seeker who posted the job
  """
  parent: Parent!

  """
  Details about the timing of the job, when it starts and how regular the sitter is needed
  """
  schedule: JobSchedule!

  """
  The current status of the job
  """
  status: JobStatus!

  """
  A descriptive title for the job
  """
  title: String!

  """
  Time the job was last updated
  """
  updatedAt: DateTime!
}

union JobSchedule = NannyJobSchedule | OccasionalJobSchedule | OneTimeJobSchedule | RegularJobSchedule | UrgentJobSchedule | UrgentNannyJobSchedule

enum JobStatus {
  CLOSED

  """
  Return value only
  """
  JOB_STATUS_CLOSED

  """
  Return value only
  """
  JOB_STATUS_OPEN

  """
  Return value only
  """
  JOB_STATUS_PENDING

  """
  Return value only
  """
  JOB_STATUS_REJECTED
  OPEN
  PENDING
  REJECTED
}

enum Language {
  ARABIC
  ARMENIAN
  BENGALI
  BULGARIAN
  BURMESE
  CHINESE
  CREOLE
  CZECH
  DANISH
  DUTCH
  ENGLISH
  ERITRIAN
  ESPERANTO
  ESTONIAN
  FANTI
  FARSI
  FINNISH
  FRENCH
  GERMAN
  GREEK
  HAUSA
  HAWAIIAN
  HEBREW
  HINDI
  HUNGARIAN
  IGBO
  IRISH
  ITALIAN
  JAPANESE
  KOREAN
  MANDARIN
  NORWEGIAN
  OTHER
  POLISH
  PORTUGUESE
  PUNJABI
  RUSSIAN
  SIGN_LANGUAGE
  SINGALESE
  SPANISH
  SWAHILI
  SWEDISH
  TEMME
  THAI
  TURKISH
  TWI
  UKRAINIAN
  URDU
  WELSH
  YIDDISH
}

"""
ListJob provides data for a parent's list of posted jobs
"""
type ListJob implements Job {
  """
  Sitter applications for the job. Retrieves only first page of applications.To
  retrieve subsequent pages, use query.job with first and after arguments.
  """
  applications(first: Int): ApplicationConnection!

  """
  The type of care the parent requested
  """
  careType: CareType!

  """
  Time the job was posted
  """
  createdAt: DateTime!

  """
  The body of the description for the job
  """
  description: String!

  """
  Date the Job expires, ISO-8601 format. Time information is not included.
  """
  expiresAt: Date!

  """
  The identifier for the job
  """
  id: UUID!

  """
  Whether the job is considered currently active considering the state and expiry
  """
  isActive: Boolean!

  """
  The seeker who posted the job
  """
  parent: Parent!

  """
  Details about the timing of the job, when it starts and how regular the sitter is needed
  """
  schedule: JobSchedule!

  """
  The current status of the job
  """
  status: JobStatus!

  """
  A descriptive title for the job
  """
  title: String!

  """
  Time the job was last updated
  """
  updatedAt: DateTime!
}

"""
Location represents a location in the multiverse
"""
type Location {
  """
  A textual representation of the location
  """
  details: String

  """
  The point on earth's coordinate system
  """
  geoPoint: Point

  """
  Denotes whether this is a physical or virtual location
  """
  virtual: Boolean!
}

"""
LocationInput represents a location in the multiverse
"""
input LocationInput {
  """
  The location description
  """
  details: String

  """
  The coordinates of the location. Leave null if this is a virtual location
  """
  geoPoint: GeoPointInput
}

type Mutation {
  """
  cancelContract allows a sitter or parent to cancel a contract
  """
  cancelContract(id: UUID!): Boolean

  """
  cancelRequest allows a parent to cancel their request
  """
  cancelRequest(id: UUID!): Boolean

  """
  clearAvailability allows a sitter to "unset" any availability they have previously set
  """
  clearAvailability(end: DateTime!, start: DateTime!): Boolean

  """
  Update job status as closed
  """
  closeJob(id: UUID!): IndividualJob

  """
  createAvailability allows a sitter to create an availability block of a certain kind
  """
  createAvailability(end: DateTime!, kind: AvailabilityKind!, start: DateTime!): Boolean

  """
  createInterviewRequest is used by a parent to request an interview with a specific sitter
  """
  createInterviewRequest(details: String!, end: DateTime!, familyMembers: [FamilyMemberInput!]!, location: LocationInput!, parent: MyAccountInput!, petInfo: [PetInformation!]!, rate: Int!, sitter: SitterAccountInput!, start: DateTime!): Request!

  """
  createRepeatingAvailability allows a sitter to generate future repeating availability
  """
  createRepeatingAvailability(end: DateTime!, schedule: RepeatingAvailabilitySchedule!, start: DateTime!): RepeatingAvailability!

  """
  createReview creates a standard review for a reviewee
  """
  createReview(id: UUID!, privateFeedback: String, publicFeedback: String, reviewee: UUID!, stars: Stars!): Review!

  """
  deleteReview marks a review as hidden from public view
  """
  deleteReview(id: UUID!): Review

  """
  respondToRequest allows a sitter to mark their response to a request. A
  contract will be created and returned on a positive response status
  """
  respondToRequest(declinedReason: String, myAccount: MyAccountInput!, requestId: UUID!, response: IdentifiedSitterResponse!): Contract

  """
  undeleteReview marks a review as visible for public view
  """
  undeleteReview(id: UUID!): Review

  """
  Updates to a parents account
  """
  updateParent(input: UpdateAccountInput!): UpdateParentPayload

  """
  updateReview allows a user to update review attributes
  """
  updateReview(id: UUID!, publicFeedback: String, stars: Stars!): Review

  """
  writeAccountNotes allows an account to write a note about another
  """
  writeAccountNotes(notes: String!, subjectID: UUID!): AccountNote
}

"""
MyAccountInput represents a Sittercity.com account entity used for input
"""
input MyAccountInput {
  """
  The first name for this account
  """
  firstName: String!

  """
  The last name for this account
  """
  lastName: String!

  """
  The photo url for this account
  """
  photoUrl: String
}

enum NannyEmploymentType {
  FULL_TIME
  PART_TIME
}

type NannyJobSchedule {
  """
  Part time or full time employment
  """
  employmentType: [NannyEmploymentType!]!

  """
  The end time for the schedule, can be up to 24 hours later
  """
  endTime: HourMinute!

  """
  When the parent needs care
  """
  hours: [NannyScheduleType!]!
  isStartDateFlexible: Boolean!
  isStartTimeFlexible: Boolean!

  """
  The expected start date of the job
  """
  startDate: Date

  """
  The start time for the schedule
  """
  startTime: HourMinute!
}

enum NannyScheduleType {
  WEEKDAY_AFTERNOON
  WEEKDAY_DAY
  WEEKDAY_EVENING
  WEEKDAY_MORNING
  WEEKENDS_DAY
  WEEKENDS_EVENING
}

type OccasionalJobSchedule {
  isStartDateFlexible: Boolean!

  """
  The expected start date of the job.
  """
  startDate: Date
}

type OneTimeJobSchedule {
  """
  The end time for the schedule, can be up to 24 hours later
  """
  endTime: HourMinute!
  isStartTimeFlexible: Boolean!

  """
  The expected start date of the job.
  """
  startDate: Date

  """
  The start time for the schedule
  """
  startTime: HourMinute!
}

"""
Satisfies the Relay Cursor Connections graphql specification. See
https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  Does this object have a next page?
  """
  hasNextPage: Boolean!

  """
  Does this object have a previous page?
  """
  hasPreviousPage: Boolean!
}

"""
Parent represents a Sittercity.com parent
"""
type Parent implements Account {
  """
  The cancelled contracts for the account
  """
  cancelledContracts(after: String, first: Int): AccountContractsConnection!

  """
  The cancelled requests for the account
  """
  cancelledRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The caretype the account selected
  """
  careType: CareType

  """
  The completed contracts for the account
  """
  completedContracts(after: String, first: Int): AccountContractsConnection!

  """
  When a parent account was created
  """
  createdAt: String

  """
  The declined requests for the account
  """
  declinedRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The expired requests for the account
  """
  expiredRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The referral source of a parent
  """
  howDidYouHearAboutUs: String

  """
  The sso identifier for the account
  """
  id: UUID!

  """
  The jobs associated with the current parent account
  """
  jobs(after: String, first: Int): ParentJobsListConnection!

  """
  A name for the account used for display purposes
  """
  name: String!

  """
  A phone number for this account
  """
  phoneNumber: PhoneNumber

  """
  A photo url for the account
  """
  photoUrl: String

  """
  The pending requests for the account
  """
  requests(after: String, first: Int): AccountRequestsConnection!

  """
  The upcoming contracts for the account
  """
  upcomingContracts(after: String, first: Int): AccountContractsConnection!
}

type ParentInvalidInput {
  field: ParentInvalidInputField
  message: [String!]
}

enum ParentInvalidInputField {
  """
  Invalid City
  """
  CITY

  """
  Invalid Postal Code
  """
  POSTAL_CODE
}

"""
ParentJobsListConnection contains pagination informationand edges for job postings from a parent account.
"""
type ParentJobsListConnection {
  """
  Edges for this connection
  """
  edges: [ParentJobsListEdge!]!

  """
  Pagination information for this connection
  """
  pageInfo: PageInfo!

  """
  Total count of job postings
  """
  totalCount: Int!
}

"""
ParentJobsListEdge contains edge information for the parent -> jobs connection
"""
type ParentJobsListEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: ListJob
}

"""
PetInformation represents a choice of pet
"""
enum PetInformation {
  CAT
  DOG
  OTHER
}

scalar PhoneNumber

"""
Point represents a specific point on a Cartesian coordinate system
"""
type Point {
  """
  The x coordinate/longitude of the point
  """
  x: Decimal!

  """
  The y coordinate/longitude of the point
  """
  y: Decimal!
}

type PostalAddress {
  """
  PostalAddress first address line
  """
  addressLine1: String

  """
  PostalAddress second address line
  """
  addressLine2: String

  """
  PostalAddress city
  """
  city: String

  """
  PostalAddress postal code
  """
  postalCode: String

  """
  PostalAddress state
  """
  state: String
}

"""
PostalAddress represents a Members postal address
"""
input PostalAddressInput {
  """
  PostalAddress first address line
  """
  addressLine1: String

  """
  PostalAddress second address line
  """
  addressLine2: String

  """
  PostalAddress city
  """
  city: String

  """
  Googles unique place id
  """
  placeId: String

  """
  PostalAddress postal code
  """
  postalCode: String

  """
  PostalAddress state
  """
  state: State
}

type Query {
  """
  account returns an account object by an ID. The kind parameter is ignored.
  """
  account(id: UUID!, kind: AccountKind!): Account

  """
  contract returns a single contract. Returns null if contract isn't found or has been cancelled.
  """
  contract(id: UUID!): Contract

  """
  geopage returns the geopage that matches the city and state
  """
  geopage(city: String!, state: String!): Geopage

  """
  job returns a single job. Returns null if job isn't found or has been cancelled.
  """
  job(id: UUID!): IndividualJob

  """
  registration returns registration related data for parents.
  """
  parentRegistration(id: UUID!): RegistrationResponse

  """
  request returns the generated response. Returns null if request is not entertained or has canceled.
  """
  request(id: UUID!): Request

  """
  reviewSummary returns a ReviewSummary for a sitter. Returns null if sitter isn't found
  """
  reviewSummary(sitterID: UUID!): ReviewSummary

  """
  sitterSearch accepts search parameters and returns sitters that match the criteria
  """
  sitterSearch(after: String, first: Int, searchParams: SitterSearchInput!): SitterSearchResultConnection!

  """
  sitters returns a list of sitter search result objects by an ID.
  """
  sitters(ids: [UUID!]!): [SitterSearchResult!]

  """
  viewer returns the currently authenticated account. The kind parameter is ignored.
  """
  viewer(kind: AccountKind!): Account!
}

type RegistrationResponse {
  """
  The caretype the account selected
  """
  careType: CareType

  """
  When a parent account was created
  """
  createdAt: DateTime

  """
  Referral source
  """
  howDidYouHearAboutUs: String

  """
  The postal address of a parent
  """
  postalAddress: PostalAddress
}

type RegularJobSchedule {
  """
  A collection of days that the job is regularly scheduled on
  """
  days: [Day!]!

  """
  The end time for the schedule, can be up to 24 hours later
  """
  endTime: HourMinute!
  isStartDateFlexible: Boolean!
  isStartTimeFlexible: Boolean!

  """
  The expected start date of the job.
  """
  startDate: Date

  """
  The start time for the schedule
  """
  startTime: HourMinute!
}

"""
RepeatingAvailability describes a sitter specified schedule of availability that occurs on a schedule
"""
type RepeatingAvailability {
  """
  When this availability block ends
  """
  end: DateTime!

  """
  The primary identifier for this repeating availability block
  """
  id: UUID!

  """
  The schedule this availability repeats at
  """
  schedule: RepeatingAvailabilitySchedule!

  """
  When this availability block starts
  """
  start: DateTime!
}

"""
RepeatingAvailabilitySchedule represents the schedule of a repeating availability block
"""
enum RepeatingAvailabilitySchedule {
  """
  Each weekday
  """
  WEEKDAYS

  """
  The same day of the week, every week
  """
  WEEKLY
}

"""
Request represents a parent asking for some type of care
"""
interface Request {
  """
  A freeform text representation of the work
  """
  details: String!

  """
  The end time of the work the request represents
  """
  end: DateTime!

  """
  The time this request expires at. Sitters cannot respond once the expiry hits
  """
  expiry: DateTime!

  """
  A list of family members the work will involve
  """
  familyMembers: [FamilyMember!]!

  """
  The primary key identifier of this request
  """
  id: UUID!

  """
  A list of sitter accounts associated with this request
  """
  identifiedSitters: [IdentifiedSitter!]!

  """
  The location information for where the interview will occur at
  """
  location: Location!

  """
  The parent who is requesting the service
  """
  parent: Parent!

  """
  A list of any kinds of pets at the location
  """
  petInfo: [PetInformation!]!

  """
  The rate for the sitting in USD/hour
  """
  rate: Int!

  """
  The start time of the work the request represents
  """
  start: DateTime!
}

"""
A review represents feedback for a sitter given by a reviewer
"""
type Review {
  """
  When the review happened
  """
  at: DateTime!

  """
  The primary key identifier for this review
  """
  id: UUID!

  """
  Freeform public text feedback the reviewer left
  """
  publicFeedback: String

  """
  The reviewee primary key identifier, a Sitter
  """
  revieweeID: UUID!

  """
  The reviewer primary key identifier, a Parent
  """
  reviewerID: UUID!

  """
  The star rating for the review
  """
  stars: Stars!
}

"""
ReviewDataReviewEdge contains edge information for the ReviewData -> Review connection
"""
type ReviewDataReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Review
}

"""
ReviewDataReviewsConnection contains pagination info and edges for review relationships
"""
type ReviewDataReviewsConnection {
  """
  Edges for this connection
  """
  edges: [ReviewDataReviewEdge!]!

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!
}

"""
ReviewSummary represents an aggregate of reviews for a particular sitter
"""
type ReviewSummary {
  """
  The list of reviews for this group
  """
  reviews(after: String, first: Int, hidden: Boolean = false): ReviewDataReviewsConnection! @deprecated(reason: "Use Sitter.reviews instead")

  """
  The average star rating across all reviews for this group
  """
  starAggregate: Float!

  """
  The total count of Reviews for a particular sitter
  """
  totalReviewCount: Int!
}

"""
Sitter represents a Sittercity.com sitter
"""
type Sitter implements Account {
  """
  The account notes the viewer wrote about the sitter
  """
  accountNote: AccountNote

  """
  The availabilities connection for this sitter
  """
  availabilities(after: String, first: Int): SitterAvailabilitiesConnection

  """
  The cancelled contracts for the account
  """
  cancelledContracts(after: String, first: Int): AccountContractsConnection!

  """
  The cancelled requests for the account
  """
  cancelledRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The completed contracts for the account
  """
  completedContracts(after: String, first: Int): AccountContractsConnection!

  """
  The declined requests for the account
  """
  declinedRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The expired requests for the account
  """
  expiredRequests(after: String, first: Int): AccountRequestsConnection!

  """
  The sso identifier for the account
  """
  id: UUID!

  """
  A name for the account used for display purposes
  """
  name: String!

  """
  A phone number for this account
  """
  phoneNumber: PhoneNumber

  """
  A photo url for the account
  """
  photoUrl: String

  """
  The pending requests for the account
  """
  requests(after: String, first: Int): AccountRequestsConnection!

  """
  The list of reviews for the sitter
  """
  reviews(after: String, first: Int, hidden: Boolean = false): SitterReviewsConnection!

  """
  The upcoming contracts for the account
  """
  upcomingContracts(after: String, first: Int): AccountContractsConnection!
}

"""
SitterAccountInput represents a sitter account used for input, relative to a parent account
"""
input SitterAccountInput {
  """
  The display name that the parent sees
  """
  displayName: String!

  """
  The sso identifier for the sitter account
  """
  id: UUID!

  """
  The photo url for the sitter
  """
  photoUrl: String
}

"""
SitterAvailabilitiesConnection contains pagination info and edges for availability connection from a sitter
"""
type SitterAvailabilitiesConnection {
  """
  Edges for this connection
  """
  edges: [SitterAvailabilitiesEdge!]!

  """
  The time that the sitter last set any availability. Only available if the sitter has set availability \
              previously
  """
  lastUpdatedAt: DateTime

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!
}

"""
SitterAvailabilitiesEdge contains edge information for the Sitter -> Availability connection
"""
type SitterAvailabilitiesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Availability
}

"""
SitterReviewEdge contains edge information for the sitter review connection
"""
type SitterReviewEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: Review
}

"""
SitterReviewsConnection contains pagination info and edges for sitter review relationships
"""
type SitterReviewsConnection {
  """
  Edges for this connection
  """
  edges: [SitterReviewEdge!]!

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!

  """
  The average star rating across all reviews for this group
  """
  starAggregate: Float!

  """
  The total count of Reviews for a particular sitter
  """
  totalReviewCount: Int!
}

"""
SitterSearchInput allows specification for searching sitters. Optional arguments may be added in the future
"""
input SitterSearchInput {
  """
  The care type of the requested sitters, can be babysitter or nanny. If unset, it searches all care types.
  """
  careType: String

  """
  The maximum distance that a sitter can be from the search geopoint
  """
  distance: Int

  """
  The end time to search by availability
  """
  end: DateTime

  """
  The geopoint where the center of the search should occur
  """
  geoPoint: GeoPointInput!

  """
  Filter sitters by whether they have a car (false or excluded returns all sitters)
  """
  hasCar: Boolean

  """
  Filter sitters by whether they are a volunteer (false or excluded returns all sitters)
  """
  isVolunteerProvider: Boolean

  """
  Languages to filter a sitter
  """
  languages: [Language!]

  """
  Filter sitters by whether they provide school support such as homework help
  """
  providesSchoolSupport: Boolean

  """
  The maximum rate (in dollars) that a sitter charges
  """
  rate: Int

  """
  The start time to search by availability
  """
  start: DateTime

  """
  The minimum years of experience that a sitter must have
  """
  yearsExperience: Int
}

"""
SitterSearchResult is returned when searching for a Sitter
"""
type SitterSearchResult {
  """
  This sitter's availability that best matched the search criteria
  """
  availability: Availability

  """
  The average rating across all reviews for this sitter
  """
  avgRating: Float

  """
  The expiry period for their basic background check
  """
  basicBackgroundCheckExpiry: DateTime

  """
  Is this sitter cpr-certified?
  """
  cprCertified: Boolean

  """
  What is the description for this sitter?
  """
  description: String

  """
  How far this sitter is from the source location.
  """
  distance: Decimal!

  """
  The expiry period for the enhanced background check
  """
  enhancedBackgroundCheckExpiry: DateTime

  """
  Does this sitter have a car?
  """
  hasCar: Boolean

  """
  Does this sitter have first-aid training?
  """
  hasFirstAidTraining: Boolean

  """
  The flag indicating whether or not the sitter is a volunteer
  """
  isVolunteerProvider: Boolean!

  """
  Languages spoken by a sitter
  """
  languages: [Language!]!

  """
  The last time this sitter logged in
  """
  lastLogin: DateTime!

  """
  This sitter's going maximum rate in cents
  """
  maxRate: Int

  """
  This sitter's going minimum rate in cents
  """
  minRate: Int

  """
  Does this sitter provide school support such as homework help?
  """
  providesSchoolSupport: Boolean!

  """
  How far this sitter is from the source location
  """
  sitter: Sitter!

  """
  The total count of ratings across all reviews for this sitter
  """
  totalRatings: Int

  """
  The expiry period for the motor vehicle background check
  """
  vehicleBackgroundCheckExpiry: DateTime

  """
  How many years of experience does this sitter have?
  """
  yearsExperience: Int!
}

"""
SitterSearchResultConnection contains pagination info and edges for search results
"""
type SitterSearchResultConnection {
  """
  Edges for this connection
  """
  edges: [SitterSearchResultEdge!]!

  """
  Pagination info for this connection
  """
  pageInfo: PageInfo!

  """
  Total count of found sitters
  """
  totalCount: Int!
}

"""
SitterSearchResultEdge contains edge information for the sitter search result
"""
type SitterSearchResultEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: SitterSearchResult
}

"""
Stars is the enumeration of scale that a reviewer can set for a reviewee
"""
enum Stars {
  """
  Five stars is 5
  """
  FIVE_STARS

  """
  Five stars is 4
  """
  FOUR_STARS

  """
  Five stars is 1
  """
  ONE_STAR

  """
  Five stars is 3
  """
  THREE_STARS

  """
  Five stars is 2
  """
  TWO_STARS
}

enum State {
  AK
  AL
  AR
  AZ
  CA
  CO
  CT
  CZ
  DC
  DE
  FL
  GA
  GU
  HI
  IA
  ID
  IL
  IN
  KS
  KY
  LA
  MA
  MD
  ME
  MI
  MN
  MO
  MS
  MT
  NC
  ND
  NE
  NH
  NJ
  NM
  NV
  NY
  OH
  OK
  OR
  PA
  PR
  RI
  SC
  SD
  TN
  TX
  UT
  VA
  VI
  VT
  WA
  WI
  WV
  WY
}

scalar UUID

"""
UpdateAccountInput represents an accounts available updates
"""
input UpdateAccountInput {
  """
  Accounts Care Type
  """
  careType: CareType

  """
  Referral source
  """
  howDidYouHearAboutUs: [HowDidYouHearAboutUs!]

  """
  Accounts Postal Address
  """
  postalAddress: PostalAddressInput
}

"""
Autogenerated return type of UpdateParent
"""
type UpdateParentPayload {
  howDidYouHearAboutUs: String
  id: UUID
  parent: Parent
  problems: [ParentInvalidInput!]
}

"""
no other schedule details are taken for urgent jobs
"""
type UrgentJobSchedule {
  isUrgent: Boolean!
}

type UrgentNannyJobSchedule {
  """
  Part time or full time employment
  """
  employmentType: [NannyEmploymentType!]!

  """
  The end time for the schedule, can be up to 24 hours later
  """
  endTime: HourMinute!

  """
  When the parent needs care
  """
  hours: [NannyScheduleType!]!
  isStartTimeFlexible: Boolean!

  """
  The start time for the schedule
  """
  startTime: HourMinute!
}
